name: Deploy to EC2 instance

on:
  push:
    branches: [ master ]

jobs:
  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 instance
        run: |
          aws ec2 start-instances --instance-ids ${{ vars.INSTANCE_ID }}
          sleep 40

      - name: Check if instance is ready
        run: |
          echo "public_ip=$(aws ec2 describe-instances --instance-ids ${{ vars.INSTANCE_ID }} --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> $GITHUB_ENV

      - name: Connect via ssh and pull changes
        run: |
          echo "${{ secrets.SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem
          echo $public_ip
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$public_ip /bin/bash << EOL
            cd ec2-auto-deploy
            git pull
            npm install
          EOL

      - name: Stop EC2 instance
        run: |
          aws ec2 stop-instances --instance-ids ${{ vars.INSTANCE_ID }}
          sleep 40

      - name: Create new AMI
        run: |
          echo "new_ami_id=$(aws ec2 create-image --instance-id ${{ vars.INSTANCE_ID }} --output text --name vp-converter-ami_$(date +'%Y-%m-%d-%H.%M'))" >> $GITHUB_ENV
          sleep 40

      - name: Update function environment variables
        run: |
          new_envs=$(aws lambda get-function-configuration --function-name my-s3-function --query "Environment.Variables | merge(@, \`{\"AMI_ID\":\"$new_ami_id\"}\`)")

          aws lambda update-function-configuration --function-name my-s3-function --environment "{ \"Variables\": $new_envs }"
          sleep 40

      - name: Delete old AMI
        run: |
          images_num=$(aws ec2 describe-images --filter "Name=name,Values=vp-converter-ami_*" --region ${{ secrets.AWS_REGION }} --query 'length(Images)' --output text)
          echo $images_num

          if (($images_num > 1)); then
            old_ami_id=$(aws ec2 describe-images --filter "Name=name,Values=vp-converter-ami_*" --region ${{ secrets.AWS_REGION }} --query 'sort_by(Images,&CreationDate)[0].ImageId' --output text)

            echo $old_ami_id

            aws ec2 deregister-image --image-id $old_ami_id
          fi

          sleep 40
